
using System;

namespace Scalesque {

	//Warning: This file was generated by a T4 template.  Any manual changes you make maybe overwritten when the templating code activates.

	/// <summary>
	/// Applicative functor extension methods for Validation
	/// </summary>
	public static class ValidationApplicativeFunctors {

		/// <summary>
		/// Implements an applicative functor for 2 Validation instances
		/// </summary>
		public static Validation<TFail,TResult> ApplicativeFunctor<T1,T2,TFail,TResult>(this Validation<ISemiJoin<TFail>,T1> m1, Validation<ISemiJoin<TFail>,T2> m2, Func<T1,T2,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return m2.Applicative(applicative, failFunc).ProjectFailure().Map(x=>x.Value);
		}

		/// <summary>
		/// Implements an applicative functor for 3 Validation instances
		/// </summary>
		public static Validation<TFail,TResult> ApplicativeFunctor<T1,T2,T3,TFail,TResult>(this Validation<ISemiJoin<TFail>,T1> m1, Validation<ISemiJoin<TFail>,T2> m2,Validation<ISemiJoin<TFail>,T3> m3, Func<T1,T2,T3,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return m3.Applicative(m2.Applicative(applicative, failFunc), failFunc).ProjectFailure().Map(x=>x.Value);
		}

		/// <summary>
		/// Implements an applicative functor for 4 Validation instances
		/// </summary>
		public static Validation<TFail,TResult> ApplicativeFunctor<T1,T2,T3,T4,TFail,TResult>(this Validation<ISemiJoin<TFail>,T1> m1, Validation<ISemiJoin<TFail>,T2> m2,Validation<ISemiJoin<TFail>,T3> m3,Validation<ISemiJoin<TFail>,T4> m4, Func<T1,T2,T3,T4,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return m4.Applicative(m3.Applicative(m2.Applicative(applicative, failFunc), failFunc), failFunc).ProjectFailure().Map(x=>x.Value);
		}

		/// <summary>
		/// Implements an applicative functor for 5 Validation instances
		/// </summary>
		public static Validation<TFail,TResult> ApplicativeFunctor<T1,T2,T3,T4,T5,TFail,TResult>(this Validation<ISemiJoin<TFail>,T1> m1, Validation<ISemiJoin<TFail>,T2> m2,Validation<ISemiJoin<TFail>,T3> m3,Validation<ISemiJoin<TFail>,T4> m4,Validation<ISemiJoin<TFail>,T5> m5, Func<T1,T2,T3,T4,T5,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return m5.Applicative(m4.Applicative(m3.Applicative(m2.Applicative(applicative, failFunc), failFunc), failFunc), failFunc).ProjectFailure().Map(x=>x.Value);
		}

		/// <summary>
		/// Implements an applicative functor for 6 Validation instances
		/// </summary>
		public static Validation<TFail,TResult> ApplicativeFunctor<T1,T2,T3,T4,T5,T6,TFail,TResult>(this Validation<ISemiJoin<TFail>,T1> m1, Validation<ISemiJoin<TFail>,T2> m2,Validation<ISemiJoin<TFail>,T3> m3,Validation<ISemiJoin<TFail>,T4> m4,Validation<ISemiJoin<TFail>,T5> m5,Validation<ISemiJoin<TFail>,T6> m6, Func<T1,T2,T3,T4,T5,T6,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return m6.Applicative(m5.Applicative(m4.Applicative(m3.Applicative(m2.Applicative(applicative, failFunc), failFunc), failFunc), failFunc), failFunc).ProjectFailure().Map(x=>x.Value);
		}

		/// <summary>
		/// Implements an applicative functor for 7 Validation instances
		/// </summary>
		public static Validation<TFail,TResult> ApplicativeFunctor<T1,T2,T3,T4,T5,T6,T7,TFail,TResult>(this Validation<ISemiJoin<TFail>,T1> m1, Validation<ISemiJoin<TFail>,T2> m2,Validation<ISemiJoin<TFail>,T3> m3,Validation<ISemiJoin<TFail>,T4> m4,Validation<ISemiJoin<TFail>,T5> m5,Validation<ISemiJoin<TFail>,T6> m6,Validation<ISemiJoin<TFail>,T7> m7, Func<T1,T2,T3,T4,T5,T6,T7,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return m7.Applicative(m6.Applicative(m5.Applicative(m4.Applicative(m3.Applicative(m2.Applicative(applicative, failFunc), failFunc), failFunc), failFunc), failFunc), failFunc).ProjectFailure().Map(x=>x.Value);
		}

		/// <summary>
		/// Implements an applicative functor for 8 Validation instances
		/// </summary>
		public static Validation<TFail,TResult> ApplicativeFunctor<T1,T2,T3,T4,T5,T6,T7,T8,TFail,TResult>(this Validation<ISemiJoin<TFail>,T1> m1, Validation<ISemiJoin<TFail>,T2> m2,Validation<ISemiJoin<TFail>,T3> m3,Validation<ISemiJoin<TFail>,T4> m4,Validation<ISemiJoin<TFail>,T5> m5,Validation<ISemiJoin<TFail>,T6> m6,Validation<ISemiJoin<TFail>,T7> m7,Validation<ISemiJoin<TFail>,T8> m8, Func<T1,T2,T3,T4,T5,T6,T7,T8,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return m8.Applicative(m7.Applicative(m6.Applicative(m5.Applicative(m4.Applicative(m3.Applicative(m2.Applicative(applicative, failFunc), failFunc), failFunc), failFunc), failFunc), failFunc), failFunc).ProjectFailure().Map(x=>x.Value);
		}

	}
}
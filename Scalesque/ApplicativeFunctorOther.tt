<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>

<#@ output extension=".cs" #>
using System;

namespace Scalesque {

	//Warning: This file was generated by a T4 template.  Any manual changes you make maybe overwritten when the templating code activates.

	<#
	var typesToGenFor = new[]{"Validation"};
	foreach(var genType in typesToGenFor){
	#>
/// <summary>
	/// Applicative functor extension methods for <#=genType#>
	/// </summary>
	public static class <#=genType#>ApplicativeFunctors {

	<#
	
		Func<IEnumerable<string>, string, string> seperate =(list, seperator) => list.Aggregate("", (acc, t) => acc + seperator + t).Trim(seperator.ToCharArray());
		for(int arity=2;arity<=8;arity++){
			var inputGenTypes = seperate(Enumerable.Range(2, arity -1).Select(x => String.Format("{0}<{1},T{2}> m{2}", genType,"ISemiJoin<TFail>", x)), ",");
			var methodGenerics = seperate(Enumerable.Range(1, arity).Select(x => String.Format("T{0}",x)),",");

			//var curriedSemiJoinTypes = seperate(Enumerable.Range(1, arity).Select(x => "SJ"),",");
			var curriedSemiJoinParams = seperate(Enumerable.Range(1, arity).Select(x => String.Format("sj{0}", x)),",");
			var curriedSemiJoinFuncBodyLeft = seperate(Enumerable.Range(1, arity - 1).Select(x => String.Format("sj{0}{1}", x, (x == (arity - 1) ? "" : ".SemiJoin"))),"(");
			var curriedSemiJoinFuncBodyJoinCall = String.Format("(sj{0}", arity);
			var curriedSemiJoinFuncBodyRightParen = seperate(Enumerable.Range(1, (arity - 2)).Select(x => ")"),"");

			var leftApplicativeCalls = seperate(Enumerable.Range(2, arity -1).Reverse().Select(x => String.Format("m{0}.Applicative",x)),"(");
			var rightApplicativeCalls = seperate(Enumerable.Range(1, arity -1).Select(x => ", failFunc)"), "");
			
			var leftCurriedTypes = seperate(Enumerable.Range(2, arity -1).Select(x=>String.Format("Func<SJ")) ,",");
			var rightCurriedTypes = seperate(Enumerable.Range(2, arity -1).Select(x=>String.Format("Func<T{0}", x)) ,",");
			var closeCurryTypes = seperate(Enumerable.Range(2, arity -1).Select(x=>String.Format(">")) ,"");


			#>
	/// <summary>
		/// Implements an applicative functor for <#=arity#> <#=genType#> instances
		/// </summary>
		public static <#=genType#><TFail,TResult> ApplicativeFunctor<<#=methodGenerics#>,TFail,TResult>(this <#=genType#><ISemiJoin<TFail>,T1> m1, <#=inputGenTypes#>, Func<<#=methodGenerics#>,TResult> f) {
			var curriedApplicative = f.Curry();
			Func<ISemiJoin<TFail>, ISemiJoin<TFail>, ISemiJoin<TFail>> failFunc = (sj1, sj2) => sj1.SemiJoin(sj2);
			var applicative = m1.ProjectSuccess().Map(curriedApplicative);
			return <#=leftApplicativeCalls#>(applicative<#=rightApplicativeCalls#>.ProjectFailure().Map(x=>x.Value);
		}

	<#

		}

	#>
}
<# } #>
}
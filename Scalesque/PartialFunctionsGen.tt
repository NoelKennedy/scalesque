<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>

<#@ output extension=".cs" #>
using System;

namespace Scalesque {

	//Warning: This file was generated by a T4 template.  Any manual changes you make maybe overwritten when the templating code activates.

	/// <summary>
    /// An implementation of partially applied functions
    /// </summary>
	public static class PartialFunctions {

		<#

	for(int arity=1;arity<=8;arity++){
		for(int applications=1;applications<=arity;applications++) {
			Func<IEnumerable<string>, string, string> seperate =(list, seperator) => list.Aggregate("", (acc, t) => acc + seperator + t).Trim(seperator.ToCharArray());
            var allGenericTypes = seperate(Enumerable.Range(1, arity).Select(x => "T" + x.ToString()), ",") + ",TResult";
            var signatureOfParametersToApply = seperate(Enumerable.Range(1, applications).Select(x => string.Format("T{0} value{0}", x)), ", ");
            var parameterApplication = seperate(Enumerable.Range(1, arity).Select(x => string.Format("value{0}", x)), ",");
			var unappliedParameters = seperate(Enumerable.Range(applications, arity).Where(x => (arity >= x) & x > applications).Select(x => string.Format("value{0}", x)), ",");
            var signatureOfPartiallyAppliedFunction = "Func<" + seperate(Enumerable.Range(applications, arity).Where(x => (arity >= x) & x > applications).Select(x => "T" + x.ToString()).Concat(new string[] { "TResult" }), ",") + ">";
			#>
/// <summary>
		/// Creates a partially applied function of arity <#=arity-applications#> from a function of arity <#=arity#>
		/// </summary>
		public static <#= signatureOfPartiallyAppliedFunction #> Partial<<#= allGenericTypes #>>(this Func<<#= allGenericTypes #>> f, <#=signatureOfParametersToApply#>) {
			return (<#=unappliedParameters#>)=>f(<#=parameterApplication#>);
		}

		<# }
	}
	#>

	}
}